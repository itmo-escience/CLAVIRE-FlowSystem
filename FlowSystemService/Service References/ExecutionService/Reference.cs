//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Easis.Wfs.FlowSystemService.ExecutionService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskDescription", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Easis.Wfs.FlowSystemService.ExecutionService.Task))]
    public partial class TaskDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> ExecParamsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Easis.Wfs.FlowSystemService.ExecutionService.TaskFileDescription[] InputFilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Easis.Wfs.FlowSystemService.ExecutionService.TaskLaunchMode LaunchModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MethodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Easis.Wfs.FlowSystemService.ExecutionService.TaskFileDescription[] OutputFilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> ParamsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Easis.Wfs.FlowSystemService.ExecutionService.TaskPriority PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong TaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserCertField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WfIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> ExecParams {
            get {
                return this.ExecParamsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExecParamsField, value) != true)) {
                    this.ExecParamsField = value;
                    this.RaisePropertyChanged("ExecParams");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Easis.Wfs.FlowSystemService.ExecutionService.TaskFileDescription[] InputFiles {
            get {
                return this.InputFilesField;
            }
            set {
                if ((object.ReferenceEquals(this.InputFilesField, value) != true)) {
                    this.InputFilesField = value;
                    this.RaisePropertyChanged("InputFiles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Easis.Wfs.FlowSystemService.ExecutionService.TaskLaunchMode LaunchMode {
            get {
                return this.LaunchModeField;
            }
            set {
                if ((this.LaunchModeField.Equals(value) != true)) {
                    this.LaunchModeField = value;
                    this.RaisePropertyChanged("LaunchMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Method {
            get {
                return this.MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodField, value) != true)) {
                    this.MethodField = value;
                    this.RaisePropertyChanged("Method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Easis.Wfs.FlowSystemService.ExecutionService.TaskFileDescription[] OutputFiles {
            get {
                return this.OutputFilesField;
            }
            set {
                if ((object.ReferenceEquals(this.OutputFilesField, value) != true)) {
                    this.OutputFilesField = value;
                    this.RaisePropertyChanged("OutputFiles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Package {
            get {
                return this.PackageField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageField, value) != true)) {
                    this.PackageField = value;
                    this.RaisePropertyChanged("Package");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Params {
            get {
                return this.ParamsField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamsField, value) != true)) {
                    this.ParamsField = value;
                    this.RaisePropertyChanged("Params");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Easis.Wfs.FlowSystemService.ExecutionService.TaskPriority Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserCert {
            get {
                return this.UserCertField;
            }
            set {
                if ((object.ReferenceEquals(this.UserCertField, value) != true)) {
                    this.UserCertField = value;
                    this.RaisePropertyChanged("UserCert");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WfId {
            get {
                return this.WfIdField;
            }
            set {
                if ((object.ReferenceEquals(this.WfIdField, value) != true)) {
                    this.WfIdField = value;
                    this.RaisePropertyChanged("WfId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    [System.SerializableAttribute()]
    public partial class Task : Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Easis.Wfs.FlowSystemService.ExecutionService.NodeTotals[] AssignedNodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Easis.Wfs.FlowSystemService.ExecutionService.ResourceTotals AssignedResourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> OutputParamsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Easis.Wfs.FlowSystemService.ExecutionService.TaskState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeMeasurement TimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Easis.Wfs.FlowSystemService.ExecutionService.NodeTotals[] AssignedNodes {
            get {
                return this.AssignedNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.AssignedNodesField, value) != true)) {
                    this.AssignedNodesField = value;
                    this.RaisePropertyChanged("AssignedNodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Easis.Wfs.FlowSystemService.ExecutionService.ResourceTotals AssignedResource {
            get {
                return this.AssignedResourceField;
            }
            set {
                if ((object.ReferenceEquals(this.AssignedResourceField, value) != true)) {
                    this.AssignedResourceField = value;
                    this.RaisePropertyChanged("AssignedResource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> OutputParams {
            get {
                return this.OutputParamsField;
            }
            set {
                if ((object.ReferenceEquals(this.OutputParamsField, value) != true)) {
                    this.OutputParamsField = value;
                    this.RaisePropertyChanged("OutputParams");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Easis.Wfs.FlowSystemService.ExecutionService.TaskState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeMeasurement Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskFileDescription", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    [System.SerializableAttribute()]
    public partial struct TaskFileDescription : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SlotNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StorageIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SlotName {
            get {
                return this.SlotNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SlotNameField, value) != true)) {
                    this.SlotNameField = value;
                    this.RaisePropertyChanged("SlotName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StorageId {
            get {
                return this.StorageIdField;
            }
            set {
                if ((object.ReferenceEquals(this.StorageIdField, value) != true)) {
                    this.StorageIdField = value;
                    this.RaisePropertyChanged("StorageId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskLaunchMode", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    public enum TaskLaunchMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskPriority", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    public enum TaskPriority : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Urgent = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResourceTotals", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    [System.SerializableAttribute()]
    public partial class ResourceTotals : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NodesTotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResourceDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] SupportedArchitecturesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NodesTotal {
            get {
                return this.NodesTotalField;
            }
            set {
                if ((this.NodesTotalField.Equals(value) != true)) {
                    this.NodesTotalField = value;
                    this.RaisePropertyChanged("NodesTotal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProviderName {
            get {
                return this.ProviderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderNameField, value) != true)) {
                    this.ProviderNameField = value;
                    this.RaisePropertyChanged("ProviderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResourceDescription {
            get {
                return this.ResourceDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ResourceDescriptionField, value) != true)) {
                    this.ResourceDescriptionField = value;
                    this.RaisePropertyChanged("ResourceDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResourceName {
            get {
                return this.ResourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ResourceNameField, value) != true)) {
                    this.ResourceNameField = value;
                    this.RaisePropertyChanged("ResourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SupportedArchitectures {
            get {
                return this.SupportedArchitecturesField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportedArchitecturesField, value) != true)) {
                    this.SupportedArchitecturesField = value;
                    this.RaisePropertyChanged("SupportedArchitectures");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskTimeMeasurement", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    [System.SerializableAttribute()]
    public partial class TaskTimeMeasurement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeMetric, System.TimeSpan> DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EstimatedFinishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EstimatedStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.TimeSpan> LeftField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeOverheads, System.TimeSpan> OverheadAveragesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeOverheads, System.TimeSpan> OverheadTotalsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeMetric, System.DateTime> WhenFinishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeMetric, System.DateTime> WhenStartedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeMetric, System.TimeSpan> Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((object.ReferenceEquals(this.DurationField, value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EstimatedFinish {
            get {
                return this.EstimatedFinishField;
            }
            set {
                if ((this.EstimatedFinishField.Equals(value) != true)) {
                    this.EstimatedFinishField = value;
                    this.RaisePropertyChanged("EstimatedFinish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EstimatedStart {
            get {
                return this.EstimatedStartField;
            }
            set {
                if ((this.EstimatedStartField.Equals(value) != true)) {
                    this.EstimatedStartField = value;
                    this.RaisePropertyChanged("EstimatedStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> Left {
            get {
                return this.LeftField;
            }
            set {
                if ((this.LeftField.Equals(value) != true)) {
                    this.LeftField = value;
                    this.RaisePropertyChanged("Left");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeOverheads, System.TimeSpan> OverheadAverages {
            get {
                return this.OverheadAveragesField;
            }
            set {
                if ((object.ReferenceEquals(this.OverheadAveragesField, value) != true)) {
                    this.OverheadAveragesField = value;
                    this.RaisePropertyChanged("OverheadAverages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeOverheads, System.TimeSpan> OverheadTotals {
            get {
                return this.OverheadTotalsField;
            }
            set {
                if ((object.ReferenceEquals(this.OverheadTotalsField, value) != true)) {
                    this.OverheadTotalsField = value;
                    this.RaisePropertyChanged("OverheadTotals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeMetric, System.DateTime> WhenFinished {
            get {
                return this.WhenFinishedField;
            }
            set {
                if ((object.ReferenceEquals(this.WhenFinishedField, value) != true)) {
                    this.WhenFinishedField = value;
                    this.RaisePropertyChanged("WhenFinished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<Easis.Wfs.FlowSystemService.ExecutionService.TaskTimeMetric, System.DateTime> WhenStarted {
            get {
                return this.WhenStartedField;
            }
            set {
                if ((object.ReferenceEquals(this.WhenStartedField, value) != true)) {
                    this.WhenStartedField = value;
                    this.RaisePropertyChanged("WhenStarted");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeTotals", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    [System.SerializableAttribute()]
    public partial class NodeTotals : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoresUsedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] SupportedArchitecturesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoresUsed {
            get {
                return this.CoresUsedField;
            }
            set {
                if ((this.CoresUsedField.Equals(value) != true)) {
                    this.CoresUsedField = value;
                    this.RaisePropertyChanged("CoresUsed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SupportedArchitectures {
            get {
                return this.SupportedArchitecturesField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportedArchitecturesField, value) != true)) {
                    this.SupportedArchitecturesField = value;
                    this.RaisePropertyChanged("SupportedArchitectures");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskState", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    public enum TaskState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Defined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReadyToExecute = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scheduled = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Started = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Aborted = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Completed = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskTimeMetric", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    public enum TaskTimeMetric : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Postponed = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Queued = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Brokering = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Calculation = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskTimeOverheads", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    public enum TaskTimeOverheads : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitInQueue = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PackageBase = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Estimation = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scheduler = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Provider = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InputFilesCopy = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OutputFilesCopy = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Other = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 8,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskDependency", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    [System.SerializableAttribute()]
    public partial struct TaskDependency : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong ChildTaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong ParentTaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WfIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong ChildTaskId {
            get {
                return this.ChildTaskIdField;
            }
            set {
                if ((this.ChildTaskIdField.Equals(value) != true)) {
                    this.ChildTaskIdField = value;
                    this.RaisePropertyChanged("ChildTaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong ParentTaskId {
            get {
                return this.ParentTaskIdField;
            }
            set {
                if ((this.ParentTaskIdField.Equals(value) != true)) {
                    this.ParentTaskIdField = value;
                    this.RaisePropertyChanged("ParentTaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WfId {
            get {
                return this.WfIdField;
            }
            set {
                if ((object.ReferenceEquals(this.WfIdField, value) != true)) {
                    this.WfIdField = value;
                    this.RaisePropertyChanged("WfId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BriefTaskInfo", Namespace="http://schemas.datacontract.org/2004/07/MITP")]
    [System.SerializableAttribute()]
    public partial class BriefTaskInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] NodeAddressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Easis.Wfs.FlowSystemService.ExecutionService.TaskState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong TaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WfIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] NodeAddresses {
            get {
                return this.NodeAddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeAddressesField, value) != true)) {
                    this.NodeAddressesField = value;
                    this.RaisePropertyChanged("NodeAddresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Package {
            get {
                return this.PackageField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageField, value) != true)) {
                    this.PackageField = value;
                    this.RaisePropertyChanged("Package");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResourceName {
            get {
                return this.ResourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ResourceNameField, value) != true)) {
                    this.ResourceNameField = value;
                    this.RaisePropertyChanged("ResourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Easis.Wfs.FlowSystemService.ExecutionService.TaskState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WfId {
            get {
                return this.WfIdField;
            }
            set {
                if ((object.ReferenceEquals(this.WfIdField, value) != true)) {
                    this.WfIdField = value;
                    this.RaisePropertyChanged("WfId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExecutionService.IExecutionBrokerService")]
    public interface IExecutionBrokerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecutionBrokerService/MagicHappens", ReplyAction="http://tempuri.org/IExecutionBrokerService/MagicHappensResponse")]
        bool MagicHappens();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExecutionBrokerService/MagicHappens", ReplyAction="http://tempuri.org/IExecutionBrokerService/MagicHappensResponse")]
        System.IAsyncResult BeginMagicHappens(System.AsyncCallback callback, object asyncState);
        
        bool EndMagicHappens(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecutionBrokerService/Define", ReplyAction="http://tempuri.org/IExecutionBrokerService/DefineResponse")]
        void Define(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription[] tasks, Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExecutionBrokerService/Define", ReplyAction="http://tempuri.org/IExecutionBrokerService/DefineResponse")]
        System.IAsyncResult BeginDefine(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription[] tasks, Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies, System.AsyncCallback callback, object asyncState);
        
        void EndDefine(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecutionBrokerService/DefineTask", ReplyAction="http://tempuri.org/IExecutionBrokerService/DefineTaskResponse")]
        void DefineTask(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription task);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExecutionBrokerService/DefineTask", ReplyAction="http://tempuri.org/IExecutionBrokerService/DefineTaskResponse")]
        System.IAsyncResult BeginDefineTask(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription task, System.AsyncCallback callback, object asyncState);
        
        void EndDefineTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecutionBrokerService/DefineDependencies", ReplyAction="http://tempuri.org/IExecutionBrokerService/DefineDependenciesResponse")]
        void DefineDependencies(Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExecutionBrokerService/DefineDependencies", ReplyAction="http://tempuri.org/IExecutionBrokerService/DefineDependenciesResponse")]
        System.IAsyncResult BeginDefineDependencies(Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies, System.AsyncCallback callback, object asyncState);
        
        void EndDefineDependencies(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecutionBrokerService/Execute", ReplyAction="http://tempuri.org/IExecutionBrokerService/ExecuteResponse")]
        void Execute(ulong[] taskIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExecutionBrokerService/Execute", ReplyAction="http://tempuri.org/IExecutionBrokerService/ExecuteResponse")]
        System.IAsyncResult BeginExecute(ulong[] taskIds, System.AsyncCallback callback, object asyncState);
        
        void EndExecute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecutionBrokerService/Abort", ReplyAction="http://tempuri.org/IExecutionBrokerService/AbortResponse")]
        void Abort(ulong[] taskId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExecutionBrokerService/Abort", ReplyAction="http://tempuri.org/IExecutionBrokerService/AbortResponse")]
        System.IAsyncResult BeginAbort(ulong[] taskId, System.AsyncCallback callback, object asyncState);
        
        void EndAbort(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecutionBrokerService/GetInfo", ReplyAction="http://tempuri.org/IExecutionBrokerService/GetInfoResponse")]
        Easis.Wfs.FlowSystemService.ExecutionService.Task GetInfo(ulong taskId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExecutionBrokerService/GetInfo", ReplyAction="http://tempuri.org/IExecutionBrokerService/GetInfoResponse")]
        System.IAsyncResult BeginGetInfo(ulong taskId, System.AsyncCallback callback, object asyncState);
        
        Easis.Wfs.FlowSystemService.ExecutionService.Task EndGetInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecutionBrokerService/GetBriefTaskList", ReplyAction="http://tempuri.org/IExecutionBrokerService/GetBriefTaskListResponse")]
        Easis.Wfs.FlowSystemService.ExecutionService.BriefTaskInfo[] GetBriefTaskList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExecutionBrokerService/GetBriefTaskList", ReplyAction="http://tempuri.org/IExecutionBrokerService/GetBriefTaskListResponse")]
        System.IAsyncResult BeginGetBriefTaskList(System.AsyncCallback callback, object asyncState);
        
        Easis.Wfs.FlowSystemService.ExecutionService.BriefTaskInfo[] EndGetBriefTaskList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecutionBrokerService/GetNewTaskId", ReplyAction="http://tempuri.org/IExecutionBrokerService/GetNewTaskIdResponse")]
        ulong GetNewTaskId();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExecutionBrokerService/GetNewTaskId", ReplyAction="http://tempuri.org/IExecutionBrokerService/GetNewTaskIdResponse")]
        System.IAsyncResult BeginGetNewTaskId(System.AsyncCallback callback, object asyncState);
        
        ulong EndGetNewTaskId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExecutionBrokerService/Update", ReplyAction="http://tempuri.org/IExecutionBrokerService/UpdateResponse")]
        void Update();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExecutionBrokerService/Update", ReplyAction="http://tempuri.org/IExecutionBrokerService/UpdateResponse")]
        System.IAsyncResult BeginUpdate(System.AsyncCallback callback, object asyncState);
        
        void EndUpdate(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExecutionBrokerServiceChannel : Easis.Wfs.FlowSystemService.ExecutionService.IExecutionBrokerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MagicHappensCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MagicHappensCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Easis.Wfs.FlowSystemService.ExecutionService.Task Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Easis.Wfs.FlowSystemService.ExecutionService.Task)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBriefTaskListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBriefTaskListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Easis.Wfs.FlowSystemService.ExecutionService.BriefTaskInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Easis.Wfs.FlowSystemService.ExecutionService.BriefTaskInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNewTaskIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNewTaskIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ulong Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecutionBrokerServiceClient : System.ServiceModel.ClientBase<Easis.Wfs.FlowSystemService.ExecutionService.IExecutionBrokerService>, Easis.Wfs.FlowSystemService.ExecutionService.IExecutionBrokerService {
        
        private BeginOperationDelegate onBeginMagicHappensDelegate;
        
        private EndOperationDelegate onEndMagicHappensDelegate;
        
        private System.Threading.SendOrPostCallback onMagicHappensCompletedDelegate;
        
        private BeginOperationDelegate onBeginDefineDelegate;
        
        private EndOperationDelegate onEndDefineDelegate;
        
        private System.Threading.SendOrPostCallback onDefineCompletedDelegate;
        
        private BeginOperationDelegate onBeginDefineTaskDelegate;
        
        private EndOperationDelegate onEndDefineTaskDelegate;
        
        private System.Threading.SendOrPostCallback onDefineTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginDefineDependenciesDelegate;
        
        private EndOperationDelegate onEndDefineDependenciesDelegate;
        
        private System.Threading.SendOrPostCallback onDefineDependenciesCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteDelegate;
        
        private EndOperationDelegate onEndExecuteDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteCompletedDelegate;
        
        private BeginOperationDelegate onBeginAbortDelegate;
        
        private EndOperationDelegate onEndAbortDelegate;
        
        private System.Threading.SendOrPostCallback onAbortCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInfoDelegate;
        
        private EndOperationDelegate onEndGetInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBriefTaskListDelegate;
        
        private EndOperationDelegate onEndGetBriefTaskListDelegate;
        
        private System.Threading.SendOrPostCallback onGetBriefTaskListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNewTaskIdDelegate;
        
        private EndOperationDelegate onEndGetNewTaskIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetNewTaskIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDelegate;
        
        private EndOperationDelegate onEndUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCompletedDelegate;
        
        public ExecutionBrokerServiceClient() {
        }
        
        public ExecutionBrokerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExecutionBrokerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExecutionBrokerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExecutionBrokerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<MagicHappensCompletedEventArgs> MagicHappensCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DefineCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DefineTaskCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DefineDependenciesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExecuteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AbortCompleted;
        
        public event System.EventHandler<GetInfoCompletedEventArgs> GetInfoCompleted;
        
        public event System.EventHandler<GetBriefTaskListCompletedEventArgs> GetBriefTaskListCompleted;
        
        public event System.EventHandler<GetNewTaskIdCompletedEventArgs> GetNewTaskIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCompleted;
        
        public bool MagicHappens() {
            return base.Channel.MagicHappens();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMagicHappens(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMagicHappens(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndMagicHappens(System.IAsyncResult result) {
            return base.Channel.EndMagicHappens(result);
        }
        
        private System.IAsyncResult OnBeginMagicHappens(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginMagicHappens(callback, asyncState);
        }
        
        private object[] OnEndMagicHappens(System.IAsyncResult result) {
            bool retVal = this.EndMagicHappens(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMagicHappensCompleted(object state) {
            if ((this.MagicHappensCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MagicHappensCompleted(this, new MagicHappensCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MagicHappensAsync() {
            this.MagicHappensAsync(null);
        }
        
        public void MagicHappensAsync(object userState) {
            if ((this.onBeginMagicHappensDelegate == null)) {
                this.onBeginMagicHappensDelegate = new BeginOperationDelegate(this.OnBeginMagicHappens);
            }
            if ((this.onEndMagicHappensDelegate == null)) {
                this.onEndMagicHappensDelegate = new EndOperationDelegate(this.OnEndMagicHappens);
            }
            if ((this.onMagicHappensCompletedDelegate == null)) {
                this.onMagicHappensCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMagicHappensCompleted);
            }
            base.InvokeAsync(this.onBeginMagicHappensDelegate, null, this.onEndMagicHappensDelegate, this.onMagicHappensCompletedDelegate, userState);
        }
        
        public void Define(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription[] tasks, Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies) {
            base.Channel.Define(tasks, dependencies);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDefine(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription[] tasks, Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDefine(tasks, dependencies, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDefine(System.IAsyncResult result) {
            base.Channel.EndDefine(result);
        }
        
        private System.IAsyncResult OnBeginDefine(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription[] tasks = ((Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription[])(inValues[0]));
            Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies = ((Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[])(inValues[1]));
            return this.BeginDefine(tasks, dependencies, callback, asyncState);
        }
        
        private object[] OnEndDefine(System.IAsyncResult result) {
            this.EndDefine(result);
            return null;
        }
        
        private void OnDefineCompleted(object state) {
            if ((this.DefineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DefineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DefineAsync(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription[] tasks, Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies) {
            this.DefineAsync(tasks, dependencies, null);
        }
        
        public void DefineAsync(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription[] tasks, Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies, object userState) {
            if ((this.onBeginDefineDelegate == null)) {
                this.onBeginDefineDelegate = new BeginOperationDelegate(this.OnBeginDefine);
            }
            if ((this.onEndDefineDelegate == null)) {
                this.onEndDefineDelegate = new EndOperationDelegate(this.OnEndDefine);
            }
            if ((this.onDefineCompletedDelegate == null)) {
                this.onDefineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDefineCompleted);
            }
            base.InvokeAsync(this.onBeginDefineDelegate, new object[] {
                        tasks,
                        dependencies}, this.onEndDefineDelegate, this.onDefineCompletedDelegate, userState);
        }
        
        public void DefineTask(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription task) {
            base.Channel.DefineTask(task);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDefineTask(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription task, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDefineTask(task, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDefineTask(System.IAsyncResult result) {
            base.Channel.EndDefineTask(result);
        }
        
        private System.IAsyncResult OnBeginDefineTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription task = ((Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription)(inValues[0]));
            return this.BeginDefineTask(task, callback, asyncState);
        }
        
        private object[] OnEndDefineTask(System.IAsyncResult result) {
            this.EndDefineTask(result);
            return null;
        }
        
        private void OnDefineTaskCompleted(object state) {
            if ((this.DefineTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DefineTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DefineTaskAsync(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription task) {
            this.DefineTaskAsync(task, null);
        }
        
        public void DefineTaskAsync(Easis.Wfs.FlowSystemService.ExecutionService.TaskDescription task, object userState) {
            if ((this.onBeginDefineTaskDelegate == null)) {
                this.onBeginDefineTaskDelegate = new BeginOperationDelegate(this.OnBeginDefineTask);
            }
            if ((this.onEndDefineTaskDelegate == null)) {
                this.onEndDefineTaskDelegate = new EndOperationDelegate(this.OnEndDefineTask);
            }
            if ((this.onDefineTaskCompletedDelegate == null)) {
                this.onDefineTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDefineTaskCompleted);
            }
            base.InvokeAsync(this.onBeginDefineTaskDelegate, new object[] {
                        task}, this.onEndDefineTaskDelegate, this.onDefineTaskCompletedDelegate, userState);
        }
        
        public void DefineDependencies(Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies) {
            base.Channel.DefineDependencies(dependencies);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDefineDependencies(Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDefineDependencies(dependencies, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDefineDependencies(System.IAsyncResult result) {
            base.Channel.EndDefineDependencies(result);
        }
        
        private System.IAsyncResult OnBeginDefineDependencies(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies = ((Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[])(inValues[0]));
            return this.BeginDefineDependencies(dependencies, callback, asyncState);
        }
        
        private object[] OnEndDefineDependencies(System.IAsyncResult result) {
            this.EndDefineDependencies(result);
            return null;
        }
        
        private void OnDefineDependenciesCompleted(object state) {
            if ((this.DefineDependenciesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DefineDependenciesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DefineDependenciesAsync(Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies) {
            this.DefineDependenciesAsync(dependencies, null);
        }
        
        public void DefineDependenciesAsync(Easis.Wfs.FlowSystemService.ExecutionService.TaskDependency[] dependencies, object userState) {
            if ((this.onBeginDefineDependenciesDelegate == null)) {
                this.onBeginDefineDependenciesDelegate = new BeginOperationDelegate(this.OnBeginDefineDependencies);
            }
            if ((this.onEndDefineDependenciesDelegate == null)) {
                this.onEndDefineDependenciesDelegate = new EndOperationDelegate(this.OnEndDefineDependencies);
            }
            if ((this.onDefineDependenciesCompletedDelegate == null)) {
                this.onDefineDependenciesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDefineDependenciesCompleted);
            }
            base.InvokeAsync(this.onBeginDefineDependenciesDelegate, new object[] {
                        dependencies}, this.onEndDefineDependenciesDelegate, this.onDefineDependenciesCompletedDelegate, userState);
        }
        
        public void Execute(ulong[] taskIds) {
            base.Channel.Execute(taskIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecute(ulong[] taskIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecute(taskIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndExecute(System.IAsyncResult result) {
            base.Channel.EndExecute(result);
        }
        
        private System.IAsyncResult OnBeginExecute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ulong[] taskIds = ((ulong[])(inValues[0]));
            return this.BeginExecute(taskIds, callback, asyncState);
        }
        
        private object[] OnEndExecute(System.IAsyncResult result) {
            this.EndExecute(result);
            return null;
        }
        
        private void OnExecuteCompleted(object state) {
            if ((this.ExecuteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteAsync(ulong[] taskIds) {
            this.ExecuteAsync(taskIds, null);
        }
        
        public void ExecuteAsync(ulong[] taskIds, object userState) {
            if ((this.onBeginExecuteDelegate == null)) {
                this.onBeginExecuteDelegate = new BeginOperationDelegate(this.OnBeginExecute);
            }
            if ((this.onEndExecuteDelegate == null)) {
                this.onEndExecuteDelegate = new EndOperationDelegate(this.OnEndExecute);
            }
            if ((this.onExecuteCompletedDelegate == null)) {
                this.onExecuteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteDelegate, new object[] {
                        taskIds}, this.onEndExecuteDelegate, this.onExecuteCompletedDelegate, userState);
        }
        
        public void Abort(ulong[] taskId) {
            base.Channel.Abort(taskId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAbort(ulong[] taskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAbort(taskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAbort(System.IAsyncResult result) {
            base.Channel.EndAbort(result);
        }
        
        private System.IAsyncResult OnBeginAbort(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ulong[] taskId = ((ulong[])(inValues[0]));
            return this.BeginAbort(taskId, callback, asyncState);
        }
        
        private object[] OnEndAbort(System.IAsyncResult result) {
            this.EndAbort(result);
            return null;
        }
        
        private void OnAbortCompleted(object state) {
            if ((this.AbortCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AbortCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AbortAsync(ulong[] taskId) {
            this.AbortAsync(taskId, null);
        }
        
        public void AbortAsync(ulong[] taskId, object userState) {
            if ((this.onBeginAbortDelegate == null)) {
                this.onBeginAbortDelegate = new BeginOperationDelegate(this.OnBeginAbort);
            }
            if ((this.onEndAbortDelegate == null)) {
                this.onEndAbortDelegate = new EndOperationDelegate(this.OnEndAbort);
            }
            if ((this.onAbortCompletedDelegate == null)) {
                this.onAbortCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAbortCompleted);
            }
            base.InvokeAsync(this.onBeginAbortDelegate, new object[] {
                        taskId}, this.onEndAbortDelegate, this.onAbortCompletedDelegate, userState);
        }
        
        public Easis.Wfs.FlowSystemService.ExecutionService.Task GetInfo(ulong taskId) {
            return base.Channel.GetInfo(taskId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInfo(ulong taskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInfo(taskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Easis.Wfs.FlowSystemService.ExecutionService.Task EndGetInfo(System.IAsyncResult result) {
            return base.Channel.EndGetInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ulong taskId = ((ulong)(inValues[0]));
            return this.BeginGetInfo(taskId, callback, asyncState);
        }
        
        private object[] OnEndGetInfo(System.IAsyncResult result) {
            Easis.Wfs.FlowSystemService.ExecutionService.Task retVal = this.EndGetInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInfoCompleted(object state) {
            if ((this.GetInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInfoCompleted(this, new GetInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInfoAsync(ulong taskId) {
            this.GetInfoAsync(taskId, null);
        }
        
        public void GetInfoAsync(ulong taskId, object userState) {
            if ((this.onBeginGetInfoDelegate == null)) {
                this.onBeginGetInfoDelegate = new BeginOperationDelegate(this.OnBeginGetInfo);
            }
            if ((this.onEndGetInfoDelegate == null)) {
                this.onEndGetInfoDelegate = new EndOperationDelegate(this.OnEndGetInfo);
            }
            if ((this.onGetInfoCompletedDelegate == null)) {
                this.onGetInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetInfoDelegate, new object[] {
                        taskId}, this.onEndGetInfoDelegate, this.onGetInfoCompletedDelegate, userState);
        }
        
        public Easis.Wfs.FlowSystemService.ExecutionService.BriefTaskInfo[] GetBriefTaskList() {
            return base.Channel.GetBriefTaskList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBriefTaskList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBriefTaskList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Easis.Wfs.FlowSystemService.ExecutionService.BriefTaskInfo[] EndGetBriefTaskList(System.IAsyncResult result) {
            return base.Channel.EndGetBriefTaskList(result);
        }
        
        private System.IAsyncResult OnBeginGetBriefTaskList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetBriefTaskList(callback, asyncState);
        }
        
        private object[] OnEndGetBriefTaskList(System.IAsyncResult result) {
            Easis.Wfs.FlowSystemService.ExecutionService.BriefTaskInfo[] retVal = this.EndGetBriefTaskList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBriefTaskListCompleted(object state) {
            if ((this.GetBriefTaskListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBriefTaskListCompleted(this, new GetBriefTaskListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBriefTaskListAsync() {
            this.GetBriefTaskListAsync(null);
        }
        
        public void GetBriefTaskListAsync(object userState) {
            if ((this.onBeginGetBriefTaskListDelegate == null)) {
                this.onBeginGetBriefTaskListDelegate = new BeginOperationDelegate(this.OnBeginGetBriefTaskList);
            }
            if ((this.onEndGetBriefTaskListDelegate == null)) {
                this.onEndGetBriefTaskListDelegate = new EndOperationDelegate(this.OnEndGetBriefTaskList);
            }
            if ((this.onGetBriefTaskListCompletedDelegate == null)) {
                this.onGetBriefTaskListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBriefTaskListCompleted);
            }
            base.InvokeAsync(this.onBeginGetBriefTaskListDelegate, null, this.onEndGetBriefTaskListDelegate, this.onGetBriefTaskListCompletedDelegate, userState);
        }
        
        public ulong GetNewTaskId() {
            return base.Channel.GetNewTaskId();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNewTaskId(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNewTaskId(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ulong EndGetNewTaskId(System.IAsyncResult result) {
            return base.Channel.EndGetNewTaskId(result);
        }
        
        private System.IAsyncResult OnBeginGetNewTaskId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetNewTaskId(callback, asyncState);
        }
        
        private object[] OnEndGetNewTaskId(System.IAsyncResult result) {
            ulong retVal = this.EndGetNewTaskId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNewTaskIdCompleted(object state) {
            if ((this.GetNewTaskIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNewTaskIdCompleted(this, new GetNewTaskIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNewTaskIdAsync() {
            this.GetNewTaskIdAsync(null);
        }
        
        public void GetNewTaskIdAsync(object userState) {
            if ((this.onBeginGetNewTaskIdDelegate == null)) {
                this.onBeginGetNewTaskIdDelegate = new BeginOperationDelegate(this.OnBeginGetNewTaskId);
            }
            if ((this.onEndGetNewTaskIdDelegate == null)) {
                this.onEndGetNewTaskIdDelegate = new EndOperationDelegate(this.OnEndGetNewTaskId);
            }
            if ((this.onGetNewTaskIdCompletedDelegate == null)) {
                this.onGetNewTaskIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNewTaskIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetNewTaskIdDelegate, null, this.onEndGetNewTaskIdDelegate, this.onGetNewTaskIdCompletedDelegate, userState);
        }
        
        public void Update() {
            base.Channel.Update();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdate(System.IAsyncResult result) {
            base.Channel.EndUpdate(result);
        }
        
        private System.IAsyncResult OnBeginUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginUpdate(callback, asyncState);
        }
        
        private object[] OnEndUpdate(System.IAsyncResult result) {
            this.EndUpdate(result);
            return null;
        }
        
        private void OnUpdateCompleted(object state) {
            if ((this.UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAsync() {
            this.UpdateAsync(null);
        }
        
        public void UpdateAsync(object userState) {
            if ((this.onBeginUpdateDelegate == null)) {
                this.onBeginUpdateDelegate = new BeginOperationDelegate(this.OnBeginUpdate);
            }
            if ((this.onEndUpdateDelegate == null)) {
                this.onEndUpdateDelegate = new EndOperationDelegate(this.OnEndUpdate);
            }
            if ((this.onUpdateCompletedDelegate == null)) {
                this.onUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDelegate, null, this.onEndUpdateDelegate, this.onUpdateCompletedDelegate, userState);
        }
    }
}
