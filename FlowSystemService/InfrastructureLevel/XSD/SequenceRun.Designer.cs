// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 2.8.2.29599
//    <NameSpace>Ipse.Gui.Infra.Pes.Xsd</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><IncludeSerializeMethod>True</IncludeSerializeMethod><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><AutomaticProperties>True</AutomaticProperties><DisableDebug>False</DisableDebug><CustomUsings></CustomUsings>
//  <auto-generated>
// ------------------------------------------------------------------------------
namespace Ipse.Gui.Infra.Pes.Xsd
{
	using System;
	using System.Diagnostics;
	using System.Xml.Serialization;
	using System.Collections;
	using System.Xml.Schema;
	using System.ComponentModel;
	using System.IO;
	using System.Collections.Generic;


	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.example.org/scenario")]
	[System.Xml.Serialization.XmlRootAttribute("sequenceRun", Namespace = "http://www.example.org/scenario", IsNullable = false)]
	public partial class sequenceRunType
	{

		private List<sequenceRunTypeStep> stepField;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public System.UInt64 id { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public System.UInt64 timeLimit { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public System.Boolean timeLimitSpecified { get; set; }


		/// <summary>
		/// .ctor class constructor
		/// </summary>
		public sequenceRunType()
		{
			if ((this.stepField == null))
			{
				this.stepField = new List<sequenceRunTypeStep>();
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("step")]
		public List<sequenceRunTypeStep> step
		{
			get
			{
				return this.stepField;
			}
			set
			{
				this.stepField = value;
			}
		}

		/// <summary>
		/// Serializes current sequenceRunType object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an sequenceRunType object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output sequenceRunType object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out sequenceRunType obj, out System.Exception exception)
		{
			exception = null;
			obj = null;
			try
			{
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(sequenceRunType));
				obj = ((sequenceRunType)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		/// <summary>
		/// Serializes current sequenceRunType object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an sequenceRunType object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output sequenceRunType object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out sequenceRunType obj, out System.Exception exception)
		{
			exception = null;
			obj = null;
			try
			{
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		/// <summary>
		/// Create a clone of this sequenceRunType object
		/// </summary>
		public virtual sequenceRunType Clone()
		{
			return ((sequenceRunType)(this.MemberwiseClone()));
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.example.org/scenario")]
	public partial class sequenceRunTypeStep
	{

		private List<sequenceRunTypeStepParam> paramField;

		private List<inOutType> inField;

		private List<inOutType> outField;

		private stepModeType modeField;

		public withNameType app { get; set; }

		public withNameType method { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public System.UInt64 order { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public stepType type { get; set; }


		public sequenceRunTypeStep()
		{
			if ((this.outField == null))
			{
				this.outField = new List<inOutType>();
			}
			if ((this.inField == null))
			{
				this.inField = new List<inOutType>();
			}
			if ((this.paramField == null))
			{
				this.paramField = new List<sequenceRunTypeStepParam>();
			}
			if ((this.method == null))
			{
				this.method = new withNameType();
			}
			if ((this.app == null))
			{
				this.app = new withNameType();
			}
			this.modeField = stepModeType.Auto;
		}

		[System.Xml.Serialization.XmlElementAttribute("param")]
		public List<sequenceRunTypeStepParam> param
		{
			get
			{
				return this.paramField;
			}
			set
			{
				this.paramField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("in")]
		public List<inOutType> @in
		{
			get
			{
				return this.inField;
			}
			set
			{
				this.inField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("out")]
		public List<inOutType> @out
		{
			get
			{
				return this.outField;
			}
			set
			{
				this.outField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		[System.ComponentModel.DefaultValueAttribute(stepModeType.Auto)]
		public stepModeType mode
		{
			get
			{
				return this.modeField;
			}
			set
			{
				this.modeField = value;
			}
		}

		/// <summary>
		/// Serializes current sequenceRunTypeStep object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an sequenceRunTypeStep object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output sequenceRunTypeStep object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out sequenceRunTypeStep obj, out System.Exception exception)
		{
			exception = null;
			obj = null;
			try
			{
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(sequenceRunTypeStep));
				obj = ((sequenceRunTypeStep)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		/// <summary>
		/// Serializes current sequenceRunTypeStep object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an sequenceRunTypeStep object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output sequenceRunTypeStep object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out sequenceRunTypeStep obj, out System.Exception exception)
		{
			exception = null;
			obj = null;
			try
			{
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		/// <summary>
		/// Create a clone of this sequenceRunTypeStep object
		/// </summary>
		public virtual sequenceRunTypeStep Clone()
		{
			return ((sequenceRunTypeStep)(this.MemberwiseClone()));
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.example.org/scenario")]
	public partial class withNameType
	{

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public System.String name { get; set; }


		/// <summary>
		/// Serializes current withNameType object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an withNameType object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output withNameType object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out withNameType obj, out System.Exception exception)
		{
			exception = null;
			obj = null;
			try
			{
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(withNameType));
				obj = ((withNameType)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		/// <summary>
		/// Serializes current withNameType object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an withNameType object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output withNameType object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out withNameType obj, out System.Exception exception)
		{
			exception = null;
			obj = null;
			try
			{
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		/// <summary>
		/// Create a clone of this withNameType object
		/// </summary>
		public virtual withNameType Clone()
		{
			return ((withNameType)(this.MemberwiseClone()));
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.example.org/scenario")]
	public partial class inOutType
	{

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public System.UInt64 internalId { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public System.String storageId { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public System.String slotName { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public System.String type { get; set; }


		/// <summary>
		/// Serializes current inOutType object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an inOutType object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output inOutType object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out inOutType obj, out System.Exception exception)
		{
			exception = null;
			obj = null;
			try
			{
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(inOutType));
				obj = ((inOutType)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		/// <summary>
		/// Serializes current inOutType object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an inOutType object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output inOutType object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out inOutType obj, out System.Exception exception)
		{
			exception = null;
			obj = null;
			try
			{
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		/// <summary>
		/// Create a clone of this inOutType object
		/// </summary>
		public virtual inOutType Clone()
		{
			return ((inOutType)(this.MemberwiseClone()));
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.example.org/scenario")]
	public partial class sequenceRunTypeStepParam
	{

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public System.String name { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public System.String value { get; set; }


		/// <summary>
		/// Serializes current sequenceRunTypeStepParam object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an sequenceRunTypeStepParam object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output sequenceRunTypeStepParam object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out sequenceRunTypeStepParam obj, out System.Exception exception)
		{
			exception = null;
			obj = null;
			try
			{
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(sequenceRunTypeStepParam));
				obj = ((sequenceRunTypeStepParam)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		/// <summary>
		/// Serializes current sequenceRunTypeStepParam object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an sequenceRunTypeStepParam object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output sequenceRunTypeStepParam object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out sequenceRunTypeStepParam obj, out System.Exception exception)
		{
			exception = null;
			obj = null;
			try
			{
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		/// <summary>
		/// Create a clone of this sequenceRunTypeStepParam object
		/// </summary>
		public virtual sequenceRunTypeStepParam Clone()
		{
			return ((sequenceRunTypeStepParam)(this.MemberwiseClone()));
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.example.org/scenario")]
	public enum stepModeType
	{

		/// <remarks/>
		Auto,

		/// <remarks/>
		Manual,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.example.org/scenario")]
	public enum stepType
	{

		/// <remarks/>
		exec,
	}
}
